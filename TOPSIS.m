function [ rankingTable, closeness ] = TOPSIS( DECISIONmat, weights, varargin )
%TOPSIS Technique for Order Preference by Similarity to Ideal Solution
%   Multi-criteria decision making technique

%% Example (Caterino et al., 2008)

% DECISIONmat = [ 23096 23206     33  0.538 0.414 2.90    0.022 0.291;
%                 53979 115037    122 0.074 0.120 15.18   0.024 0.002;
%                 11175 40353     34  0.274 0.052 2.97    0.040 0.172;
%                 74675 97884     119 0.114 0.414 2.65    0.020 0.000];
% 
% weights = [0.073, 0.172, 0.073, 0.280, 0.026, 0.201, 0.035, 0.141];
% 
% TYPEcriteria = [0 0 0 1 0 0 0 0]; % C4 is a benefit, others are costs
% 
% [RANKINGtable] = TOPSIS( DECISIONmat, weights, TYPEcriteria);

%% Optional input

% Max number of optional inputs
numvarargs = length(varargin);
if numvarargs > 4
    error('myfuns:somefun2Alt:TooManyInputs', ...
        'requires at most 4 optional inputs');
end

% set defaults for optional inputs
optargs = {0, 0, 0, 'spider'};

% now put these defaults into the valuesToUse cell array, 
% and overwrite with the ones specified in varargin.
optargs(1:numvarargs) = varargin;
% or ...
% [optargs{1:numvarargs}] = varargin{:};

% Place optional args in memorable variable names
[ TYPEcriteria, ALTERNATIVEnames, CRITERIAnames, typePlot ] = optargs{:};

%% Manipulate input

if numel(TYPEcriteria) == 1
    % every criterion is considered as cost-like (best performance is the minimum)
    TYPEcriteria = zeros(1,size(DECISIONmat,2));
end

if numel(ALTERNATIVEnames) == 1
    ALTERNATIVEnames = {'Alt 1', 'Alt 2', 'Alt 3', 'Alt 4', 'Alt 5', 'Alt 6', 'Alt 7', 'Alt 8', 'Alt 9', 'Alt 10'}';
    ALTERNATIVEnames(size(DECISIONmat,1)+1:end) = [];
end

if numel(CRITERIAnames) == 1
    CRITERIAnames = {'C1', 'C2', 'C3', 'C4', 'C5', 'C6', 'C7', 'C8', 'C9', 'C10'};
    CRITERIAnames(size(DECISIONmat,2)+1:end) = [];    
end

%% Normalise Decision matrix

% normaliser
normaliser = meshgrid( sum(DECISIONmat.^2) .^ 0.5, ones(size(DECISIONmat,1),1) );

% normalise the matrix
normDECISIONmat = DECISIONmat ./ normaliser;

%% Weight the normalised matrix

% weighter
weighter = meshgrid(weights, ones(size(DECISIONmat,1),1) );

% weight the matrix
WEIGHTEDnormDECISIONmat = normDECISIONmat .* weighter;

%% Calculate ideal solutions

% if a given criteria represent some sort of cost, the best performance in
% such criterion is the minimum. Viceversa, for a benefit you use maximum

maxima = max(WEIGHTEDnormDECISIONmat);
minima = min(WEIGHTEDnormDECISIONmat);

% positive ideal solution (BEST)
IDEALpos = zeros(1,size(DECISIONmat,2));
IDEALpos(TYPEcriteria==0) = minima(TYPEcriteria==0);
IDEALpos(TYPEcriteria==1) = maxima(TYPEcriteria==1);

% negative ideal solution (WORST)
IDEALneg = zeros(1,size(DECISIONmat,2));
IDEALneg(TYPEcriteria==0) = maxima(TYPEcriteria==0);
IDEALneg(TYPEcriteria==1) = minima(TYPEcriteria==1);

%% Calculate relative closeness to ideal solutions

% distance from the IDEAL POSITIVE solution
DISTidealPOS = ( sum( ( WEIGHTEDnormDECISIONmat - meshgrid(IDEALpos, ones(size(DECISIONmat,1),1) ) ).^2 , 2) ).^0.5;
% distance from the IDEAL NEGATIVE solution
DISTidealNEG = ( sum( ( WEIGHTEDnormDECISIONmat - meshgrid(IDEALneg, ones(size(DECISIONmat,1),1) ) ).^2 , 2) ).^0.5;

% relative closeness ratio
closeness = DISTidealNEG ./ (DISTidealPOS + DISTidealNEG);

%% Prepare output

% Final table
rankingTable = array2table([closeness,WEIGHTEDnormDECISIONmat], 'VariableNames', [{'Closeness'}, CRITERIAnames(:)' ], 'RowNames',ALTERNATIVEnames);
rankingTable = sortrows(rankingTable, 'Closeness', 'descend');

%% Plot

if ~strcmp(typePlot, 'none')
    if strcmp(typePlot, 'spider')
        % Axes properties
        axes_interval = 1;
        axes_precision = 2;

        % Spider plot
        spider_plot(WEIGHTEDnormDECISIONmat, CRITERIAnames, axes_interval, axes_precision,...
            'LineStyle', '-', 'LineWidth', 2);    
    else
        figure
        parallelcoords(WEIGHTEDnormDECISIONmat, 'Group', ALTERNATIVEnames, 'Labels', CRITERIAnames)
        ylabel('')
        set(gca, 'XTickLabelRotation', 45)
    end

    % Legend properties
    legend(ALTERNATIVEnames, 'Location', 'NorthWest', 'box', 'off');

    % text properties
    set(gca,'FontSize',16)
    set(findall(gcf,'type','text'),'FontSize',14)
end

end

