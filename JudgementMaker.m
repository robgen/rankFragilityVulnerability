function [ JudgementMatrix ] = JudgementMaker( DesiredWeights )
%JudgementMaker gives you a decision matrix that will provide approximately
%the DesiredWeights
%
% the value ajk in the decision matrix corresponds approximately to the
% ratio of the weights wj/wk
%
% This function uses this concept to get the ajk given the weights wj

%% Example
% 
% DesiredWeights = [ 0.30 0.03 0.03 0.12 0.04 0.18 0.30 ];
% [ JudgementMatrix ] = JudgementMaker( DesiredWeights );
% 
% % Double check
% Weights = AHP({'1' '2' '3' '4' '5' '6' '7' }, JudgementMatrix);
% 
% error = Weights - DesiredWeights;

%% Function

% is the sum equal to one?
if abs( sum(DesiredWeights(:)) - 1) > 0.0001
    error('Sum of the desired weights is not one')
end

% calculate wj/wk: temporary judjement matrix
TempWeightMatrix = DesiredWeights(:) * ones(1, numel(DesiredWeights));
TempMatrix = TempWeightMatrix ./ TempWeightMatrix';

% round numbers for the upper triangular matrix
UpperTriangular = triu(TempMatrix);
UpperTriangular(UpperTriangular>=1) = min ( 9 , round( UpperTriangular(UpperTriangular>=1) ) );
UpperTriangular(UpperTriangular<1)  = 1 ./ ( min ( 9 , round( 1./UpperTriangular(UpperTriangular<1) ) ) );

% add the lower triangular part of the matrix by doing the reciprocal
LowerTriangular = 1 ./ rot90(fliplr(UpperTriangular),1);

% compose the upper and lower diagonal matrices
JudgementMatrix = triu(UpperTriangular) + tril(LowerTriangular,-1);

end
