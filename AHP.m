function [ weights, consistent, CR, JudgementMatrix, CI, adoptedRCI ] = AHP( ...
    Criteria, varargin )
%AHP - Analytic Hierarchy Process
%   
%
% NOTES
%
% This works only for Ncriteria <= 9; You need to find the random
% consistency ratios for n>9
%
% INPUT
%
% Criteria      cell arrya of strings containing the names of the criteria
%               for the pairwise comparison
%
% OPTIONAL INPUT
%
% A             [-] Ncriteria x Ncriteria Matrix with pairwise comparison
%                   coefficients (ajk). If you provide this matrix, you
%                   won't be asked for the pairwise comparison

%% Optional input

% Max number of optional inputs
numvarargs = length(varargin);
if numvarargs > 2
    error('myfuns:somefun2Alt:TooManyInputs', ...
        'requires at most 2 optional inputs');
end

% set defaults for optional inputs
optargs = { 0, 0.1 };

% now put these defaults into the valuesToUse cell array, 
% and overwrite with the ones specified in varargin.
optargs(1:numvarargs) = varargin;
% or ...
% [optargs{1:numvarargs}] = varargin{:};

% Place optional args in memorable variable names
[ JudgementMatrix, crThreshold ] = optargs{:};

%% Example (Caterino et al. 2008)
% 
% Criteria = {'Installation cost' 'Manteinance cost' 'Duration of works' 'Functional compatibility' 'Skilled labour requirement' 'Impact on the foundations' 'Significant damage risk' 'Damage limitation risk' };
% 
% A = [   1 3 1 5 6 1 3 ;
%         1/3 1 3 1/2 6 1 6 ;
%         1 1/3 1 1/5 4 1/3 4;
%         1/5 2 5 1 6 2 5 ;
%         1/6 1/6 1/4 1/6 1 1/6 1/2;
%         1 1 3 1/2 6 1 5 ;
%         3 1/6 1/4 1/5 2 1/5 1 
%         ];
% 
% % Example 1: with pairwise comparison
% [ W, consistent ] = AHP(Criteria);
% 
% % Example 2: without pairwise comparison
% W = AHP(Criteria, A);

%% Pairwise comparison

if size(JudgementMatrix,2) == 1
    
    % default coefficients
    Coefficients = [9 8 7 6 5 4 3 2 1 1/2 1/3 1/4 1/5 1/6 1/7 1/8 1/9 ];
    
    % create a diagonal matrix (aij = 1, if i=j)
    JudgementMatrix = diag(ones( numel(Criteria) ,1));
    
    % fill the lower triangular matrix
    for i = 1 : numel(Criteria)
        for j = i+1 : numel(Criteria)
            
            % importance options
            options = { ['(9)' ' ' Criteria{i} ' ' 'is extrimely more important than ' Criteria{j}] '(8)' ['(7)' ' ' Criteria{i} ' ' 'is demonstratedly more important than ' Criteria{j}] '(6)' ['(5)' ' ' Criteria{i} ' ' 'is essentially more important than ' Criteria{j}] '(4)' ['(3)' ' ' Criteria{i} ' ' 'is moderately more important than ' Criteria{j}] '(2)' '(1) Equally important' ...
                        '(1/2)' ['(1/3)' ' ' Criteria{j} ' ' 'is moderately more important than ' Criteria{i}] '(1/4)' ['(1/5)' ' ' Criteria{j} ' ' 'is essentially more important than ' Criteria{i}] '(1/6)' ['(1/7)' ' ' Criteria{j} ' ' 'is demonstratedly more important than ' Criteria{i}] '(1/8)' ['(1/9)' ' ' Criteria{j} ' ' 'is extrimely more important than ' Criteria{i}] };
            
            % list dialog
            [ selection, exit ] = listdlg('PromptString','Select the most appropriate',...
                                'OKString', 'Next comparison', 'CancelString', 'Exit', ...
                'SelectionMode','single', ...
                'ListString',options, ...
                'InitialValue', 9, ...
                'uh', 40, 'fus', 20, 'ffs', 8, ...
                'ListSize', [500 250]);
            
            % exit if the user asked for it
            if exit == 0
                weights = [];
                consistent = [];
                CR = [];
                JudgementMatrix = [];
                CI = [];
                adoptedRCI = [];
                return
            end
            
            % input the coefficient in the matrix
            JudgementMatrix(i,j) = Coefficients(selection);
            
        end
    end
    
    % flip the matrix about the principal diagonal and calculate the
    % reciprocal
    A2 = 1 ./ rot90(fliplr(JudgementMatrix),1);
    
    % compose the upper and lower diagonal matrices
    JudgementMatrix = JudgementMatrix + tril(A2,-1);
    
end

%% Calculate eigenvalues and weights

% rank of the matrix
RANK = size(JudgementMatrix,1);

% eigenvalues analysis
%[ eigenvectors, eigenvalues ] = eigs(A, RANK, 'SM');
[ eigenvectors, eigenvalues ] = eig(JudgementMatrix);

% principal right eigenvector, normalised with respect to its sum: in this
% way, sum(W)=1
% The principal right eigenvector belongs to the eigenvalue of largest modulus
weights = eigenvectors(:,1) / sum(eigenvectors(:,1));

%% check consistency of the pairwise comparison

% consistency index
CI = (eigenvalues(1,1) - RANK ) / (RANK - 1);

% random consistency index depending on Ncriteria)
RCI = [0 0 0.58 0.90 1.12 1.24 1.32 1.41 1.45 1.49 1.51 1.53 1.56 1.57 1.59];

% consistency ratio (Ncriteria = RANK)
CR = CI / RCI(RANK);

% if the CR is less than 10%, the pairwise comparison is deemed consistent
consistent = 0;
if CR > crThreshold
    consistent = -1;
end

adoptedRCI = RCI(RANK);

end
